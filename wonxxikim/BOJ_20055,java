

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static int[][] delta = {{1,0},{0,1},{-1,0},{0,-1}};
	static class kan{
		int exp;
		int roboat;
		public kan(int exp, int roboat) {
			super();
			this.exp = exp;
			this.roboat = roboat;
		}
		
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		
		kan A[][] = new kan[2][N];
		st = new StringTokenizer(br.readLine());
		for(int i = 0 ; i<N ; i++) {
			A[0][i] = new kan(Integer.parseInt(st.nextToken()),0);
		}
		for(int i = N-1 ; i>=0 ; i--) {
			A[1][i] = new kan(Integer.parseInt(st.nextToken()),0);
		}
		
		int cnt =1;
		while(true) {
			// step 1. 벨트가 각 칸 위에 있는 로봇과 함께 한 칸 회전한다. (내리는 위치에 도달하면 내림)
			if(A[0][N-2].roboat==1)A[0][N-2].roboat--;
			int x = 0;
			int y = 0;
			int temp_exp = A[0][0].exp;
			int temp_roboat = A[0][0].roboat;
			int d = 0;
			while(d<4) {
				int nx = x+delta[d][0];
				int ny = y+delta[d][1];
				
				if(nx<2 && nx>=0 && ny<N && ny>=0) {
					A[x][y].exp = A[nx][ny].exp;
					A[x][y].roboat = A[nx][ny].roboat;
					x = nx;
					y = ny;
				}else d++;
			}
			A[0][1].exp = temp_exp;
			A[0][1].roboat = temp_roboat;
			
			//step 2. 가장 먼저 벨트에 올라간 로봇부터, 벨트가 회전하는 방향으로 한 칸 이동할 수 있다면 이동한다.
			for(int i = N-2 ; i>=0 ; i--) {
				if(i==N-2 && A[0][i].roboat==1 && A[0][i+1].exp>=1) {
					A[0][i].roboat--;
					A[0][i+1].exp--;
				}
				else if(A[0][i].roboat==1 && A[0][i+1].exp>=1 && A[0][i+1].roboat==0) {
					A[0][i].roboat--;
					A[0][i+1].exp--;
					A[0][i+1].roboat++;
				}
			}
			//step 3. 올리는 위치에 있는 칸의 내구도가 0이 아니면 올리는 위치에 로봇을 올린다.
			if(A[0][0].exp!=0) {
				A[0][0].roboat++;
				A[0][0].exp--;
			}
			//step 4. 내구도가 0인 칸의 개수가 K개 이상이라면 과정을 종료
			int empty = 0;
			for(int i = 0; i<2 ; i++) {
				for(int j = 0 ;j<N ; j++) {
					if(A[i][j].exp==0) empty++;
				}
			}
			if(empty>=K) break;
			
			cnt++;
		}
		System.out.println(cnt);

	}

}


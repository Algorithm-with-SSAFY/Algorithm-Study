import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class BOJ_18352 { // 백준 18352 특정 거리의 도시 찾기 - 40분
	
	private static class Node implements Comparable<Node>{
		int num, cost;

		public Node(int num, int cost) {
			super();
			this.num = num;
			this.cost = cost;
		}

		@Override
		public int compareTo(Node o) {
			// TODO Auto-generated method stub
			return Integer.compare(this.cost, o.cost);
		}
	}//Node
	
	static int n, m, k ,x, dist[];
	static ArrayList<ArrayList<Integer>> graph;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		
		st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		x = Integer.parseInt(st.nextToken());
		
		graph = new ArrayList<>();
		for (int i = 0; i < n+1; i++) {
			graph.add(new ArrayList<>());
		}
		
		for (int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			
			graph.get(a).add(b);
		}
		
		dijkstra();
		
		ArrayList<Integer> result = new ArrayList<>();
		for (int i = 1; i < dist.length; i++) {
			if (dist[i] == k) result.add(i);
		}
		if (result.size()==0) System.out.println(-1);
		else {
			for (int i : result) {
				System.out.println(i);
			}
		}
	}//main
	
	private static void dijkstra() {
		dist = new int[n+1];
		for (int i = 0; i < dist.length; i++) {
			dist[i] = Integer.MAX_VALUE;
		}
		dist[x] = 0;
		
		PriorityQueue<Node> pq = new PriorityQueue<>();
		pq.offer(new Node(x, 0));
		while(!pq.isEmpty()) {
			int cur = pq.peek().num;
			int cost_startToCur = pq.poll().cost;
			
			if (dist[cur] < cost_startToCur) continue;
			
			for (int i = 0; i < graph.get(cur).size(); i++) {
				int next = graph.get(cur).get(i);
				int cost_startToNext = cost_startToCur + 1;
				
				if (cost_startToCur < dist[next]) {
					dist[next] = cost_startToNext;
					pq.offer(new Node(next, cost_startToNext));
				}
			}
		}
	}//dijkstra
}//class
